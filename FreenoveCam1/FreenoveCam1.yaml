substitutions:
  name_of_device:       freenovecam1
  device_name_friendly: FreenoveCam1
  short_name:           cam_id
  mqtt_location:        $device_name_friendly
  mqtt_device:          "ESP32-01"
  mqtt_sensor:          "sht30"

globals:
  - id:            global_mac
    type:          std::string
    restore_value: no  # Strings cannot be saved/restored
    initial_value: '"00:11:22:AA:BB:CC"'

esphome:
  name:                $name_of_device
  friendly_name:       $device_name_friendly
  name_add_mac_suffix: false

esp32:
  board: esp-wrover-kit
  framework:
    type: arduino

light:
  - platform: status_led
    name:     "Onboard LED"
    pin:
      number:   GPIO2
      inverted: true

#output:
#  - platform: gpio
#    pin:      2
#    id:       onboard_led
#
#light:
#  - platform: binary
#    name:     "Built-in LED"
#    output:   onboard_led
#    id:       led_light

# Enable logging
logger:
  level: VERBOSE
  logs:
    mqtt.component: ERROR
    mqtt.client:    ERROR

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key_freenove_cam1
  services: # change camera parameters on-the-fly
    - service: camera_set_param
      variables:
        name:  string
        value: int
      then:
        - lambda: |-
                  bool state_return = false;
                  if( ( "contrast" == name ) && ( value >= -2 ) && ( value <= 2) ) { id( $short_name ).set_contrast( value ); state_return = true; }
                  if( ( "brightness" == name ) && ( value >= -2 ) && ( value <= 2) ) { id( $short_name ).set_brightness( value ); state_return = true; }
                  if( ( "saturation" == name ) && ( value >= -2 ) && ( value <= 2) ) { id( $short_name ).set_saturation( value ); state_return = true; }
                  if( ( "special_effect" == name ) && ( value >= 0U ) && ( value <= 6U) ) { id( $short_name ).set_special_effect( ( esphome::esp32_camera::ESP32SpecialEffect)value ); state_return = true; }
                  if( ( "aec_mode" == name ) && ( value >= 0U ) && ( value <= 1U) ) { id( $short_name ).set_aec_mode( ( esphome::esp32_camera::ESP32GainControlMode)value ); state_return = true; }
                  if( ( "aec2" == name ) && ( value >= 0U ) && ( value <= 1U) ) { id( $short_name ).set_aec2( value ); state_return = true; }
                  if( ( "ae_level" == name ) && ( value >= -2 ) && ( value <= 2) ) { id( $short_name ).set_ae_level( value ); state_return = true; }
                  if( ( "aec_value" == name ) && ( value >= 0U ) && ( value <= 1200U) ) { id( $short_name ).set_aec_value( value ); state_return = true; }
                  if( ( "agc_mode" == name ) && ( value >= 0U ) && ( value <= 1U) ) { id( $short_name ).set_agc_mode( ( esphome::esp32_camera::ESP32GainControlMode)value ); state_return = true; }
                  if( ( "agc_value" == name ) && ( value >= 0U ) && ( value <= 30U) ) { id( $short_name ).set_agc_value( value ); state_return = true; }
                  if( ( "agc_gain_ceiling" == name ) && ( value >= 0U ) && ( value <= 6U) ) { id( $short_name ).set_agc_gain_ceiling( ( esphome::esp32_camera::ESP32AgcGainCeiling)value ); state_return = true; }
                  if( ( "wb_mode" == name ) && ( value >= 0U ) && ( value <= 4U) ) { id( $short_name ).set_wb_mode( ( esphome::esp32_camera::ESP32WhiteBalanceMode)value ); state_return = true; }
                  if( ( "test_pattern" == name ) && ( value >= 0U ) && ( value <= 1U) ) { id( $short_name ).set_test_pattern( value ); state_return = true; }
                  if( true == state_return ) { id( $short_name ).update_camera_parameters(); }
                  else { ESP_LOGW( "esp32_camera_set_param", "Error in name or data range" ); }

ota:
  password: !secret ota_password

wifi:
  id:              wifi_id
  power_save_mode: NONE  # Options are NONE, LIGHT, and HIGH, with HIGH saving the most power.
  networks:
    - ssid: !secret     wifi_ssid
      password: !secret wifi_password
    - ssid: !secret     wifi_ssid_work
      password: !secret wifi_pass_work

mqtt:
  broker: !secret broker_address
  #  on_connect:
  #    then:
  #      - light.turn_on: led_light
  #  on_disconnect:
  #    then:
  #      - light.turn_off: led_light
  topic_prefix:   "$mqtt_location/{{ wifi.mac_address }}"

esp32_camera:
  id:                $short_name
  name:              esp-eye
  external_clock:
    pin:       GPIO21
    frequency: 20MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [ GPIO4, GPIO5, GPIO18, GPIO19, GPIO36, GPIO39, GPIO34, GPIO35 ]
  vsync_pin:         GPIO25
  href_pin:          GPIO23
  pixel_clock_pin:   GPIO22
  resolution:        1600x1200
  jpeg_quality:      10  # max. 63
  max_framerate:     5.0fps
  idle_framerate:    0.2fps
  vertical_flip:     true
  horizontal_mirror: True
  brightness:        2
  contrast:          1
  special_effect:    none
  # exposure settings
  aec_mode:          auto
  aec2:              false
  ae_level:          0
  aec_value:         300
  # gain settings
  agc_mode:          auto
  agc_gain_ceiling:  2x
  agc_value:         0
  # white balance setting
  wb_mode:           auto

binary_sensor:
  - platform: status
    name:     $device_name_friendly status

sensor:
  - platform:        wifi_signal
    name:            $device_name_friendly WiFi Signal
    update_interval: 20s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: $device_name_friendly IP address
      id:   ip_address
      on_value:
        - mqtt.publish:
            topic:           "$mqtt_location/{{ wifi.mac_address }}/ip"
            payload: !lambda |-
                             return to_string( id( ip_address ).state );
    ssid:
      name: $device_name_friendly connected SSID
    bssid:
      name: $device_name_friendly connected BSSID
    mac_address:
      name: $device_name_friendly MAC Address
      id:   text_sensor_mac_address_id
      on_value:
        - mqtt.publish:
            topic:           "$mqtt_location/{{ wifi.mac_address }}/mac"
            payload: !lambda |-
                             id( global_mac ) = id( text_sensor_mac_address_id ).state.c_str();
                             return to_string( id( text_sensor_mac_address_id ).state );
    scan_results:
      name: $device_name_friendly scan results
