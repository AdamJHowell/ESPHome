substitutions:
  name_of_device:       wt32-temperature
  device_name_friendly: WT32-ESP32-Temperature
  mqtt_location:        "FurnaceRoom"
  mqtt_device:          $device_name_friendly

esphome:
  name:          $name_of_device
  friendly_name: $device_name_friendly
  platform:      ESP32
  board:         esp-wrover-kit

ethernet:
  type:          LAN8720
  mdc_pin:       GPIO23
  mdio_pin:      GPIO18
  clk_mode:      GPIO0_IN
  phy_addr:      1
  power_pin:     GPIO16

output:
  - platform: gpio
    pin:      5
    id:       rx_led
  - platform: gpio
    pin:      17
    id:       tx_led

light:
  - platform: binary
    name:     "RX LED"
    output:   rx_led
    id:       rx_light
  - platform: binary
    name:     "TX LED"
    output:   tx_led
    id:       tx_light

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key

ota:
  password: !secret ota_password

mqtt:
  broker: !secret   broker_address
  on_connect:
    then:
      - light.turn_on: rx_light
      - light.turn_on: tx_light
  on_disconnect:
    then:
      - light.turn_off: rx_light
      - light.turn_off: tx_light
  topic_prefix:     "$mqtt_location/$name_of_device"

text_sensor:
  - platform: ethernet_info
    ip_address:
      name: ESP IP Address
    mac_address:
      name: $device_name_friendly MAC Address
      id:   text_sensor_mac_address

# This is the component, or "hub", which the sensor block uses.
dallas:
  - pin: 14
    update_interval: 20s

# This block configures each individual sensor connected to the Dallas component.
sensor:
  - platform: dallas
    #    index:    0
    address:  0xd40000000dff4528
    name:     "Water heater output"
    filters:
      - filter_out: nan
      - lambda: return ( x * 1.8 ) + 32.0;
    id:                  wh_tempF
    unit_of_measurement: "Â°F"
    accuracy_decimals:   2
    on_value:
      - mqtt.publish:
          topic:           "$mqtt_location/$name_of_device/water_heater_output"
          payload: !lambda |-
                           return to_string( id( wh_tempF ).state );

interval:
  - interval: 1min
    then:
      - mqtt.publish:
          topic:           "$mqtt_location/$device_name_friendly/mac"
          payload: !lambda |-
                           return to_string( id( text_sensor_mac_address ).state );
