substitutions:
  name_of_device:           wt32-temperature
  device_name_friendly:     WT32-ESP32-Temperature
  mqtt_location:            "FurnaceRoom"
  mqtt_device:              $device_name_friendly
  api_password: !secret     furnace_ws32_temp_api
  ota_password: !secret     furnace_ws32_temp_ota
  wifi_ssid: !secret        wifi_ssid
  wifi_pass: !secret        wifi_password
  wifi_ssid_backup: !secret wifi_ssid_backup
  wifi_pass_backup: !secret wifi_password
  broker_address: !secret   broker_address
  led_gpio:                 GPIO2

esphome:
  name:          $name_of_device
  friendly_name: $device_name_friendly
  platform:      ESP32
  board:         esp-wrover-kit

ethernet:
  type:      LAN8720
  mdc_pin:   GPIO23
  mdio_pin:  GPIO18
  clk_mode:  GPIO0_IN
  phy_addr:  1
  power_pin: GPIO16

output:
  - platform: gpio
    pin:      5
    id:       rx_led
  - platform: gpio
    pin:      17
    id:       tx_led

light:
  - platform: binary
    name:     "RX LED"
    output:   rx_led
    id:       rx_light
  - platform: binary
    name:     "TX LED"
    output:   tx_led
    id:       tx_light

# Enable MQTT publishing.
mqtt:
  broker: !secret   broker_address
  on_connect:
    then:
      - light.turn_on: rx_light
      - light.turn_on: tx_light
  on_disconnect:
    then:
      - light.turn_off: rx_light
      - light.turn_off: tx_light
  topic_prefix:     "$mqtt_location/$name_of_device"

# This is the component, or "hub", which the sensor block uses.
dallas:
  - pin:             14
    update_interval: 20s

# Enable various sensors.
sensor:
  - !include Components/Sensors/uptime.yaml
  - platform:            dallas
    #    index:    0
    address:             0xd40000000dff4528
    name:                "Water heater output"
    filters:
      - filter_out: nan
      - lambda: return ( x * 1.8 ) + 32.0;
    id:                  wh_tempF
    unit_of_measurement: "Â°F"
    accuracy_decimals:   2
    on_value:
      - mqtt.publish:
          topic:           "$mqtt_location/$name_of_device/water_heater_output"
          payload: !lambda |-
                           return to_string( id( wh_tempF ).state );

# Enable I2C communication.
i2c:
  - !include Components/Core/i2c_esp32.yaml

# Enable the Home Assistant native API.
api:
  !include Components/Core/api.yaml

# Enable OTA updates.
ota:
  !include Components/Core/ota.yaml

# Enable logging.
logger:
  !include Components/Core/logger.yaml

# The text_sensor handles many MQTT publishing duties.
text_sensor:
  - !include Components/TextSensor/ethernet_info.yaml

# The interval component handles many MQTT publishing duties.
interval:
  !include Components/Core/interval.yaml

# Enable the onboard LED as diagnostic output.
status_led:
  !include Components/Core/status_led.yaml

# Expose the node state for Home Assistant.
binary_sensor:
  - !include Components/BinarySensors/status.yaml
