substitutions:
  name:          t-displays3
  friendly_name: T-Display-S3
  mqtt_location: Mobile

esphome:
  name:          "${name}"
  friendly_name: $device_name_friendly
  platformio_options:
    board_build.mcu:                 esp32s3
    board_build.name:                "Espressif ESP32-S3-T-QT"
    board_build.upload.flash_size:   "4MB"
    board_build.upload.maximum_size: 4194304
    board_build.vendor:              "LilyGO"
  on_boot:
    - priority: 800
      then:
        - lambda: |-
                  id(disp).enable();
                  id(disp).transfer_byte(0x11);
                  id(disp).disable();

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret lilygo_t_display_s3_api

ota:
  password: !secret lilygo_t_display_s3_ota

wifi:
  ssid: !secret     wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid:             "${friendly_name} Fallback Hotspot"
    password: !secret default_password

captive_portal:

spi:
  clk_pin:  GPIO3
  mosi_pin: GPIO2

i2c:
  sda:       43
  scl:       44
  scan:      true
  frequency: 400kHz

font:
  - file: "fonts/OCRAEXT.ttf"
    id:   fontocra
    size: 42

output:
  - platform: ledc
    pin:      GPIO10
    inverted: true
    id:       backlightdim

light:
  - platform: monochromatic
    output:   backlightdim
    name:     "Backlight"

time:
  - platform: homeassistant
    id:       home_time
    timezone: America/Denver

display:
  - platform:      st7789v
    model:         Custom
    width:         128
    height:        128
    offset_width:  1
    offset_height: 2
    cs_pin:        GPIO5
    dc_pin:        GPIO6
    reset_pin:     GPIO1
    id:            disp
    rotation:      180
    lambda:        |-
                   it.strftime(0, 0, id(fontocra), TextAlign::TOP_LEFT, "%H:%M", id(home_time).now());
                   it.line(0, 50, 127, 50);

mqtt:
  broker: !secret broker_address

text_sensor:
  - platform: wifi_info
    mac_address:
      name: $device_name_friendly MAC Address
      id:   text_sensor_mac_address

interval:
  - interval: 1min
    then:
      - mqtt.publish:
          topic:           "$mqtt_location/$friendly_name/mac"
          payload: !lambda |-
                           return to_string( id( text_sensor_mac_address ).state );
      - mqtt.publish:
          topic:           "$mqtt_location/$friendly_name/ip"
          payload: !lambda |-
                           return to_string( id( ip_address ).state );
