substitutions:
  name_of_device:           freenovecam-fc1
  device_name_friendly:     FreenoveCam-FC1
  short_name:               cam_id
  mqtt_location:            "Mobile"
  mqtt_device:              $device_name_friendly
  api_password: !secret     freenove_cam1_api
  ota_password: !secret     freenove_cam1_ota
  wifi_ssid: !secret        wifi_ssid
  wifi_pass: !secret        wifi_password
  wifi_ssid_backup: !secret wifi_ssid_backup
  wifi_pass_backup: !secret wifi_password
  broker_address: !secret   broker_address
  led_gpio:                 GPIO2

esphome:
  name:                $name_of_device
  friendly_name:       $device_name_friendly
  name_add_mac_suffix: false

esp32:
  board: esp-wrover-kit
  framework:
    type: arduino

output:
  - platform: gpio
    pin:      2
    id:       onboard_led

light:
  - platform: binary
    name:     "Built-in LED"
    output:   onboard_led
    id:       led_light

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key_freenove_fc1
  services: # change camera parameters on-the-fly
    - service: camera_set_param
      variables:
        name:  string
        value: int
      then:
        - lambda: |-
                  bool state_return = false;
                  if( ( "contrast" == name ) && ( value >= -2 ) && ( value <= 2) ) { id( $short_name ).set_contrast( value ); state_return = true; }
                  if( ( "brightness" == name ) && ( value >= -2 ) && ( value <= 2) ) { id( $short_name ).set_brightness( value ); state_return = true; }
                  if( ( "saturation" == name ) && ( value >= -2 ) && ( value <= 2) ) { id( $short_name ).set_saturation( value ); state_return = true; }
                  if( ( "special_effect" == name ) && ( value >= 0U ) && ( value <= 6U) ) { id( $short_name ).set_special_effect( ( esphome::esp32_camera::ESP32SpecialEffect)value ); state_return = true; }
                  if( ( "aec_mode" == name ) && ( value >= 0U ) && ( value <= 1U) ) { id( $short_name ).set_aec_mode( ( esphome::esp32_camera::ESP32GainControlMode)value ); state_return = true; }
                  if( ( "aec2" == name ) && ( value >= 0U ) && ( value <= 1U) ) { id( $short_name ).set_aec2( value ); state_return = true; }
                  if( ( "ae_level" == name ) && ( value >= -2 ) && ( value <= 2) ) { id( $short_name ).set_ae_level( value ); state_return = true; }
                  if( ( "aec_value" == name ) && ( value >= 0U ) && ( value <= 1200U) ) { id( $short_name ).set_aec_value( value ); state_return = true; }
                  if( ( "agc_mode" == name ) && ( value >= 0U ) && ( value <= 1U) ) { id( $short_name ).set_agc_mode( ( esphome::esp32_camera::ESP32GainControlMode)value ); state_return = true; }
                  if( ( "agc_value" == name ) && ( value >= 0U ) && ( value <= 30U) ) { id( $short_name ).set_agc_value( value ); state_return = true; }
                  if( ( "agc_gain_ceiling" == name ) && ( value >= 0U ) && ( value <= 6U) ) { id( $short_name ).set_agc_gain_ceiling( ( esphome::esp32_camera::ESP32AgcGainCeiling)value ); state_return = true; }
                  if( ( "wb_mode" == name ) && ( value >= 0U ) && ( value <= 4U) ) { id( $short_name ).set_wb_mode( ( esphome::esp32_camera::ESP32WhiteBalanceMode)value ); state_return = true; }
                  if( ( "test_pattern" == name ) && ( value >= 0U ) && ( value <= 1U) ) { id( $short_name ).set_test_pattern( value ); state_return = true; }
                  if( true == state_return ) { id( $short_name ).update_camera_parameters(); }
                  else { ESP_LOGW( "esp32_camera_set_param", "Error in name or data range" ); }

esp32_camera:
  id:                $short_name
  name:              esp-eye
  external_clock:
    pin:       GPIO21
    frequency: 20MHz
  i2c_pins:
    sda: GPIO26
    scl: GPIO27
  data_pins: [GPIO4, GPIO5, GPIO18, GPIO19, GPIO36, GPIO39, GPIO34, GPIO35]
  vsync_pin:         GPIO25
  href_pin:          GPIO23
  pixel_clock_pin:   GPIO22
  resolution:        1600x1200
  jpeg_quality:      10  # max. 63
  max_framerate:     5.0fps
  idle_framerate:    0.2fps
  vertical_flip:     true
  horizontal_mirror: True
  brightness:        2
  contrast:          1
  special_effect:    none
  # exposure settings
  aec_mode:          auto
  aec2:              false
  ae_level:          0
  aec_value:         300
  # gain settings
  agc_mode:          auto
  agc_gain_ceiling:  2x
  agc_value:         0
  # white balance setting
  wb_mode:           auto

binary_sensor:
  - !include Components/BinarySensors/status.yaml
  - platform:     gpio
    pin:
      number: 32
      mode:
        input:  true
        pullup: true
    name:         $device_name_friendly button
#    device_class: window

# Enable I2C communication.
i2c:
  - !include Components/Core/i2c_esp32.yaml

# Enable Wi-Fi.
wifi:
  !include Components/Core/wifi.yaml

# Enable OTA updates.
ota:
  !include Components/Core/ota.yaml

# Enable logging.
logger:
  !include Components/Core/logger.yaml

# Enable MQTT publishing.
mqtt:
  !include Components/Core/mqtt.yaml

# Enable various sensors.
sensor:
  - !include Components/Sensors/wifi_signal.yaml
  - !include Components/Sensors/wifi_signal_percent.yaml
  - !include Components/Sensors/uptime.yaml

# The text_sensor handles many MQTT publishing duties.
text_sensor:
  - !include Components/TextSensor/wifi_info.yaml

# The interval component handles many MQTT publishing duties.
interval:
  !include Components/Core/interval.yaml

# Enable the onboard LED as diagnostic output.
status_led:
  !include Components/Core/status_led.yaml
